# -*- coding: utf-8 -*-
"""E commerce sales India.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VZRsfZaL0KA7NMWnYajVDxYXAgTVTwL4
"""

import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
import missingno as msno
import warnings
warnings.filterwarnings("ignore")
import holidays

import kagglehub
import os
import pandas as pd

# Download latest version
path = kagglehub.dataset_download("thedevastator/unlock-profits-with-e-commerce-sales-data")

print("Path to dataset files:", path)

# List all files in the dataset folder
files = os.listdir(path)
print("Files in dataset:", files)

Amazon_df = pd.read_csv(os.path.join(path, "Amazon Sale Report.csv"))
Cloud_Warehouse_df = pd.read_csv(os.path.join(path, "Cloud Warehouse Compersion Chart.csv"))
Expense_df = pd.read_csv(os.path.join(path, "Expense IIGF.csv"))
international_sale_report_df = pd.read_csv(os.path.join(path, "International sale Report.csv"))
May2022_df = pd.read_csv(os.path.join(path, "May-2022.csv"))
PLMarch2021_df = pd.read_csv(os.path.join(path, "P  L March 2021.csv"))
Sale_report_df = pd.read_csv(os.path.join(path, "Sale Report.csv"))

"""Checking the datasets"""

Amazon_df.head(), Cloud_Warehouse_df.head(), Expense_df.head(), international_sale_report_df.head(), May2022_df.head(), PLMarch2021_df.head(), Sale_report_df.head()

"""#Amazon Sales Report"""

Amazon_df

Amazon_df.columns

Amazon_df.info()

Amazon_df['Date'] = pd.to_datetime(Amazon_df['Date'])
daily_sales = Amazon_df.groupby('Date').agg(total_qty=('Qty', 'sum'), total_amount=('Amount', 'sum')).reset_index()
daily_sales

plt.figure(figsize=(10, 5))
sns.lineplot(data=daily_sales, x='Date', y='total_qty', label='Total Quantity Sold', color='blue', linewidth=2)


plt.title('Sales Trends Over Time')
plt.xlabel('Date')
plt.ylabel('Sales')
plt.xticks(rotation=45)
plt.legend()
plt.grid(True)
plt.show()

plt.figure(figsize=(10, 5))
sns.lineplot(data=daily_sales, x='Date', y='total_amount', label='Total Sales Amount ($)', color='orange', linewidth=2)
plt.title('Sales Trends Over Time')
plt.xlabel('Date')
plt.ylabel('Sales')
plt.xticks(rotation=45)
plt.legend()
plt.grid(True)
plt.show()

us_holidays = holidays.US(years=[2022, 2023])
Amazon_df['Is_Holiday'] = Amazon_df['Date'].isin(us_holidays)
Amazon_df['Day_of_Week'] = Amazon_df['Date'].dt.day_name()
Amazon_df

us_holidays = holidays.US(years=[2022, 2023])
Amazon_df['Is_Holiday'] = Amazon_df['Date'].apply(lambda x: x.date() in us_holidays)

def categorize_sales(date):
    if date.date() in us_holidays:
        return 'Holiday'
    elif date.date() < min(us_holidays.keys()):
        return 'Before Holiday'
    else:
        return 'After Holiday'

Amazon_df['Holiday_Status'] = Amazon_df['Date'].apply(categorize_sales)

sales_by_holiday = Amazon_df.groupby('Holiday_Status').agg(total_qty=('Qty', 'sum'),total_amount=('Amount', 'sum')).reset_index()


fig = px.bar(sales_by_holiday, x='Holiday_Status', y=['total_qty', 'total_amount'],
             title='Sales Performance Before, During, and After Holidays',
             labels={'value': 'Sales', 'Holiday_Status': 'Holiday Status'},
             barmode='group', height=600)

# Show the plot
fig.show()

IQR = Amazon_df['Amount'].quantile(0.75) - Amazon_df['Amount'].quantile(0.25)
1.5*IQR
upper_bound = Amazon_df['Amount'].quantile(0.75) + 1.5*IQR
lower_bound = Amazon_df['Amount'].quantile(0.25) - 1.5*IQR

Median = Amazon_df['Amount'].median()
Amazon_df['Amount'] = Amazon_df['Amount'].apply(lambda x: Median if x > upper_bound  or x < lower_bound else x)
Amazon_df['Amount'] = Amazon_df['Amount'].apply(lambda x: Median if x == 0 else x)

fig, my_ax = plt.subplots(figsize=(8,5))

sns.histplot(data = Amazon_df['Amount'], ax=my_ax, binwidth=100, kde=True)
plt.grid(linestyle='--',color='#000000')
plt.title("Distribution of Sales Amount across Count of Orders")
plt.tight_layout()

Top5_Trending_product=Amazon_df.groupby('Category')['Amount'].sum().to_frame().sort_values(by=['Amount'],ascending=False).head(5)
Top5_Trending_product

Top5_Trending_product.plot(kind='bar',color='#b00919')
plt.title('Total Amount by Category', fontsize=18, weight='bold')
plt.ylabel('Total Amount (in millions)', fontsize=14)
plt.grid(True, axis='y', linestyle='--', alpha=0.7)
plt.xticks(rotation=45, ha="right")
plt.legend()
plt.tight_layout()
plt.show()

"""#Cloud Warehouse Comparison:
## Comparing inventory levels and sales data across different cloud warehouses.
## In order to identify the most efficient warehouse in terms of sales turnover and inventory management.
"""

Cloud_Warehouse_df.head(10)

Cloud_Warehouse_df.columns

Cloud_Warehouse_df.info()

# Clean price and sales columns, converting them to numeric
Cloud_Warehouse_df['Price'] = pd.to_numeric(Cloud_Warehouse_df['Unnamed: 1'].str.replace('₹', '').str.extract('(\d+\.\d+|\d+)')[0], errors='coerce')
Cloud_Warehouse_df['Sales'] = pd.to_numeric(Cloud_Warehouse_df['INCREFF'].str.extract('(\d+\.\d+|\d+)')[0], errors='coerce')

filtered_df = Cloud_Warehouse_df.dropna(subset=['Price', 'Sales'], how='all').reset_index(drop=True)
filtered_df.info()

# Group the filtered data to calculate inventory and sales totals
summary = filtered_df.groupby('Shiprocket').agg(total_inventory_value=('Price', 'sum'),total_sales=('Sales', 'sum')).reset_index()
print(summary)

plt.figure(figsize=(10, 6))

sns.barplot(x='Shiprocket', y='total_inventory_value', data=summary, color='orange', label='Inventory Value (₹)')
sns.barplot(x='Shiprocket', y='total_sales', data=summary, color='blue', label='Sales (Units)')
plt.title('Inventory Levels and Sales Across Warehouses/Processes')
plt.ylabel('Total Value/Units')
plt.xlabel('Warehouse/Process')
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

summary['turnover_ratio'] = summary['total_sales'] / summary['total_inventory_value']


most_efficient = summary.loc[summary['turnover_ratio'].idxmax()]
print("Most Efficient Warehouse/Process:")
print(most_efficient)

"""#IIGF related expenses

## Analyze monthly expenses related to inventory, infrastructure, and general facilities.
"""

Expense_df.head(10)

Expense_df.info()

"""#International Sale Report:
## Comparing international sales data across different regions.
## Identifying the top-performing countries in terms of sales volume and revenue.
"""

international_sale_report_df

international_sale_report_df.info()

# Convert necessary columns to numeric (coerce errors to handle invalid numbers)
international_sale_report_df['RATE'] = pd.to_numeric(international_sale_report_df['RATE'], errors='coerce')
international_sale_report_df['PCS'] = pd.to_numeric(international_sale_report_df['PCS'], errors='coerce')
international_sale_report_df['GROSS AMT'] = pd.to_numeric(international_sale_report_df['GROSS AMT'], errors='coerce')

# Remove rows where essential columns (like GROSS AMT or PCS) are missing
cleaned_sales_df = international_sale_report_df.dropna(subset=['RATE', 'PCS', 'GROSS AMT'])

# Group by 'CUSTOMER' (assuming this is the region or country column)
sales_summary = cleaned_sales_df.groupby('CUSTOMER').agg(total_pcs_sold=('PCS', 'sum'), total_revenue=('GROSS AMT', 'sum')).reset_index()

# Sort by total revenue to get top-performing countries
top_countries = sales_summary.sort_values(by='total_revenue', ascending=False)

plt.figure(figsize=(12, 6))
plt.bar(top_countries['CUSTOMER'][:10], top_countries['total_revenue'][:10], color='skyblue')
plt.title('Top 10 Regions by Total Revenue')
plt.xlabel('Country')
plt.ylabel('Total Revenue (₹)')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

plt.figure(figsize=(12, 6))
plt.bar(top_countries['CUSTOMER'][:10], top_countries['total_pcs_sold'][:10], color='lightgreen')
plt.title('Top 10 Regions by Sales Volume')
plt.xlabel('Country')
plt.ylabel('Total Pieces Sold')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""#May-2022:
## Perform a detailed analysis of sales transactions for May 2022.
## Compare with data from other months to identify seasonal trends or anomalies.
"""

May2022_df

May2022_df.info()

# Clean the data
May2022_df["Weight"] = pd.to_numeric(May2022_df["Weight"], errors="coerce")
May2022_df["Final MRP Old"] = pd.to_numeric(May2022_df["Final MRP Old"], errors="coerce")
May2022_df.dropna(subset=["Weight", "Final MRP Old"], inplace=True)

# Sales Volume
sales_volume = May2022_df.groupby("Category")["Weight"].sum()

# Revenue Analysis
May2022_df["Total_Revenue"] = May2022_df["Weight"] * May2022_df["Final MRP Old"]
revenue_by_platform = May2022_df.groupby("Amazon FBA MRP")["Total_Revenue"].sum()

# Average Selling Price
avg_selling_price = May2022_df["Final MRP Old"] / May2022_df["Weight"]

# Customer Behavior
customer_behavior = May2022_df.groupby("Style Id")["Total_Revenue"].agg(["sum", "count"])

# Product Performance
product_performance = May2022_df.groupby(["Sku", "Style Id"])["Weight"].sum().sort_values(ascending=False)

# Sales Volume
plt.figure(figsize=(10, 6))
sns.barplot(x=sales_volume.index, y=sales_volume.values)
plt.title("Sales Volume by Category")
plt.show()

# Revenue by Platform
plt.figure(figsize=(18, 6))
sns.barplot(x=revenue_by_platform.index, y=revenue_by_platform.values)
plt.title("Revenue by Amazon FBA MRP")
plt.show()

# Average Selling Price
plt.figure(figsize=(10, 6))
sns.histplot(avg_selling_price)
plt.title("Average Selling Price")
plt.show()

# Customer Behavior
plt.figure(figsize=(10, 6))
sns.lineplot(x=customer_behavior["sum"], y=customer_behavior["count"])
plt.title("Customer Behavior: Total Revenue vs. Purchase Frequency")
plt.show()

"""#PL March 2021.csv:
## Conduct a profit and loss analysis for March 2021.

## Correlate the profit margins with specific sales campaigns or product launches during that period.
"""

PLMarch2021_df

PLMarch2021_df.info()

PLMarch2021_df.columns

import pandas as pd



# Columns that should be numeric (based on your schema)
numeric_cols = [
    "Weight", "TP 1", "TP 2", "MRP Old", "Final MRP Old",
    "Ajio MRP", "Amazon MRP", "Amazon FBA MRP", "Flipkart MRP",
    "Limeroad MRP", "Myntra MRP", "Paytm MRP", "Snapdeal MRP"
]

# Convert them to numeric (handling errors safely)
for col in numeric_cols:
    PLMarch2021_df[col] = pd.to_numeric(PLMarch2021_df[col], errors="coerce")

# Ensure integer columns are int64 (except TP 2 which has decimals)
int_cols = [c for c in numeric_cols if c not in ["Weight", "TP 2"]]
PLMarch2021_df[int_cols] = PLMarch2021_df[int_cols].astype("Int64")  # Nullable int dtype

# Clean the data
PLMarch2021_df["Weight"] = pd.to_numeric(PLMarch2021_df["Weight"], errors="coerce")
PLMarch2021_df["Final MRP Old"] = pd.to_numeric(PLMarch2021_df["Final MRP Old"], errors="coerce")
PLMarch2021_df.dropna(subset=["Weight", "Final MRP Old"], inplace=True)

platform_cols = ['Ajio MRP','Amazon MRP','Amazon FBA MRP','Flipkart MRP',
                 'Limeroad MRP','Myntra MRP','Paytm MRP','Snapdeal MRP']
PLMarch2021_df[platform_cols].mean().plot(kind='bar')

PLMarch2021_df['min_price'] = PLMarch2021_df[platform_cols].min(axis=1)
PLMarch2021_df['max_price'] = PLMarch2021_df[platform_cols].max(axis=1)
PLMarch2021_df['price_range'] = PLMarch2021_df['max_price'] - PLMarch2021_df['min_price']

PLMarch2021_df['discount_percent'] = (
    (PLMarch2021_df['MRP Old'] - PLMarch2021_df['Final MRP Old'])
    / PLMarch2021_df['MRP Old'] * 100
)

PLMarch2021_df[platform_cols].corr()

"""#Sales report"""

Sale_report_df

Sale_report_df.info()

Sale_report_df_clean = Sale_report_df.dropna(subset=['SKU Code'])

# Calculate total stock by product category
total_stock_by_category = Sale_report_df_clean.groupby('Category')['Stock'].sum().reset_index()
print("Total Stock by Category:")
print(total_stock_by_category)

#Visualizing the Total Stock by Category
plt.figure(figsize=(18, 6))
sns.barplot(data=total_stock_by_category, x='Category', y='Stock', palette='Blues_d')
plt.title('Total Stock by Product Category')
plt.xlabel('Product Category')
plt.ylabel('Total Stock')
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

#visualize the stock distribution by size within each category

plt.figure(figsize=(18, 6))
sns.boxplot(data=Sale_report_df_clean, x='Category', y='Stock', palette='coolwarm')
plt.title('Stock Distribution by Category')
plt.xlabel('Category')
plt.ylabel('Stock Levels')
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

#Additional Segmentation by Size and Category
stock_by_size_and_category = Sale_report_df_clean.groupby(['Category', 'Size'])['Stock'].sum().unstack().fillna(0)

print("Stock by Category and Size:")
print(stock_by_size_and_category)

#Visualizing Stock by Category and Size
stock_by_size_and_category.plot(kind='bar', stacked=True, figsize=(18, 6), colormap='viridis')
plt.title('Stock by Category and Size')
plt.xlabel('Product Category')
plt.ylabel('Stock Levels')
plt.xticks(rotation=45)
plt.legend(title='Size')
plt.grid(True)
plt.show()

